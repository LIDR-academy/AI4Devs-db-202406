// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                Int               @id @default(autoincrement())
  first_name        String            @db.VarChar(100)
  last_name         String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  educations        Education[]
  work_experiences  WorkExperience[]
  resumes           Resume[]
  applications      Application[]
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  start_date    DateTime
  end_date      DateTime?
  candidate_id  Int
  candidate     Candidate @relation(fields: [candidate_id], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  start_date  DateTime
  end_date    DateTime?
  candidate_id Int
  candidate   Candidate @relation(fields: [candidate_id], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  file_path   String    @db.VarChar(500)
  file_type   String    @db.VarChar(50)
  upload_date DateTime
  candidate_id Int
  candidate   Candidate @relation(fields: [candidate_id], references: [id])
}

model Company {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  employees Employee[]
  positions Position[]
}

model Employee {
  id         Int      @id @default(autoincrement())
  company_id Int
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  name       String   @db.VarChar(100)
  email      String   @unique @db.VarChar(255)
  role       String?  @db.VarChar(50)
  is_active  Boolean  @default(true)
  interviews Interview[]
  @@index([company_id], name: "idx_employee_company_id")
}

model Position {
  id                  Int             @id @default(autoincrement())
  company_id          Int
  interview_flow_id   Int?
  company             Company         @relation(fields: [company_id], references: [id], onDelete: Cascade)
  interview_flow      InterviewFlow?  @relation(fields: [interview_flow_id], references: [id], onDelete: SetNull)
  title               String          @db.VarChar(255)
  description         String?         @db.Text
  status              String          @db.VarChar(50)
  is_visible          Boolean         @default(true)
  location            String?         @db.VarChar(255)
  job_description     String?         @db.Text
  requirements        String?         @db.Text
  responsibilities    String?         @db.Text
  salary_min          Float?
  salary_max          Float?
  employment_type     String?         @db.VarChar(50)
  benefits            String?         @db.Text
  company_description String?         @db.Text
  application_deadline DateTime?
  contact_info        String?         @db.VarChar(255)
  applications        Application[]
  @@index([company_id], name: "idx_position_company_id")
  @@index([interview_flow_id], name: "idx_position_interview_flow_id")
}

model InterviewFlow {
  id           Int             @id @default(autoincrement())
  description  String?         @db.Text
  positions    Position[]
  steps        InterviewStep[]
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interview_flow_id Int
  interview_type_id Int?
  interview_flow   InterviewFlow @relation(fields: [interview_flow_id], references: [id], onDelete: Cascade)
  interview_type   InterviewType? @relation(fields: [interview_type_id], references: [id], onDelete: SetNull)
  name            String         @db.VarChar(100)
  order_index     Int
  interviews      Interview[]
  @@index([interview_flow_id], name: "idx_interview_step_interview_flow_id")
}

model InterviewType {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(100)
  description  String?         @db.Text
  steps        InterviewStep[]
}

model Application {
  id            Int          @id @default(autoincrement())
  position_id   Int
  candidate_id  Int
  position      Position     @relation(fields: [position_id], references: [id], onDelete: Cascade)
  candidate     Candidate    @relation(fields: [candidate_id], references: [id], onDelete: Cascade)
  application_date DateTime
  status        String?      @db.VarChar(50)
  notes         String?      @db.Text
  interviews    Interview[]
  @@index([position_id], name: "idx_application_position_id")
  @@index([candidate_id], name: "idx_application_candidate_id")
}

model Interview {
  id              Int             @id @default(autoincrement())
  application_id  Int
  interview_step_id Int
  employee_id     Int?
  application     Application     @relation(fields: [application_id], references: [id], onDelete: Cascade)
  interview_step  InterviewStep   @relation(fields: [interview_step_id], references: [id], onDelete: Cascade)
  employee        Employee?       @relation(fields: [employee_id], references: [id], onDelete: SetNull)
  interview_date  DateTime?
  result          String?         @db.VarChar(50)
  score           Int?
  notes           String?         @db.Text
  @@index([application_id], name: "idx_interview_application_id")
  @@index([employee_id], name: "idx_interview_employee_id")
}