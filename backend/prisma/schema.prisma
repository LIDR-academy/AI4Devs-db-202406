generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  status            String            @default("New") @db.VarChar(50)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  skills            CandidateSkill[]
  jobPosition       JobPosition?      @relation(fields: [jobPositionId], references: [id])
  jobPositionId     Int?
  applications      Application[]

  @@index([jobPositionId])
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@index([institution])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@index([company])
  @@index([position])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@index([uploadDate])
}

model Skill {
  id         Int              @id @default(autoincrement())
  name       String           @unique @db.VarChar(100)
  candidates CandidateSkill[]
}

model CandidateSkill {
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  skill       Skill     @relation(fields: [skillId], references: [id])
  skillId     Int

  @@id([candidateId, skillId])
}

model JobPosition {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(100)
  description String?
  status      String      @db.VarChar(50)
  isVisible   Boolean     @default(true)
  location    String?     @db.VarChar(100)
  salaryMin   Decimal?    @db.Decimal(10, 2)
  salaryMax   Decimal?    @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  candidates  Candidate[]
  company     Company     @relation(fields: [companyId], references: [id])
  companyId   Int
  applications Application[]

  @@index([companyId])
}

model Company {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  employees   Employee[]
  jobPositions JobPosition[]
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  role      String   @db.VarChar(50)
  isActive  Boolean  @default(true)
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  interviews Interview[]

  @@index([companyId])
}

model Application {
  id              Int       @id @default(autoincrement())
  applicationDate DateTime  @default(now())
  status          String    @db.VarChar(50)
  notes           String?
  candidate       Candidate @relation(fields: [candidateId], references: [id])
  candidateId     Int
  jobPosition     JobPosition @relation(fields: [jobPositionId], references: [id])
  jobPositionId   Int
  interviews      Interview[]

  @@index([candidateId])
  @@index([jobPositionId])
}

model Interview {
  id              Int           @id @default(autoincrement())
  interviewDate   DateTime
  result          String?       @db.VarChar(50)
  score           Int?
  notes           String?
  application     Application   @relation(fields: [applicationId], references: [id])
  applicationId   Int
  employee        Employee      @relation(fields: [employeeId], references: [id])
  employeeId      Int
  interviewStep   InterviewStep @relation(fields: [interviewStepId], references: [id])
  interviewStepId Int

  @@index([applicationId])
  @@index([employeeId])
  @@index([interviewStepId])
}

model InterviewFlow {
  id          Int            @id @default(autoincrement())
  description String?
  steps       InterviewStep[]
}

model InterviewStep {
  id               Int           @id @default(autoincrement())
  name             String        @db.VarChar(100)
  orderIndex       Int
  interviewFlow    InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewFlowId  Int
  interviewType    InterviewType @relation(fields: [interviewTypeId], references: [id])
  interviewTypeId  Int
  interviews       Interview[]

  @@index([interviewFlowId])
  @@index([interviewTypeId])
}

model InterviewType {
  id          Int            @id @default(autoincrement())
  name        String         @db.VarChar(100)
  description String?
  steps       InterviewStep[]
}