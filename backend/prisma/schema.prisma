// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  locationId        Int
  location          Location          @relation(fields: [locationId], references: [id])
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  applications      Application[]

  @@index([firstName, lastName], name: "idx_candidate_name")
  @@index([locationId], name: "idx_candidate_location")
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Company {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(100)
  employees Employee[]
  positions Position[]
}

model Employee {
  id        Int        @id @default(autoincrement())
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id])
  firstName String     @db.VarChar(100)
  lastName  String     @db.VarChar(100)
  email     String     @unique @db.VarChar(255)
  role      String     @db.VarChar(50)
  isActive  Boolean    @default(true)
  interviews Interview[]

  @@index([companyId], name: "idx_employee_company")
}

model Position {
  id                  Int           @id @default(autoincrement())
  companyId           Int
  company             Company       @relation(fields: [companyId], references: [id])
  interviewFlowId     Int
  interviewFlow       InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  locationId          Int
  location            Location      @relation(fields: [locationId], references: [id])
  title               String        @db.VarChar(100)
  description         String        @db.VarChar(500)
  status              PositionStatus
  isVisible           Boolean       @default(true)
  jobDescription      String        @db.Text
  requirements        String        @db.Text
  responsibilities    String        @db.Text
  salaryMin           Decimal       @db.Decimal(10, 2)
  salaryMax           Decimal       @db.Decimal(10, 2)
  employmentType      String        @db.VarChar(50)
  benefits            String        @db.Text
  companyDescription  String        @db.Text
  applicationDeadline DateTime
  contactInfo         String        @db.VarChar(255)
  applications        Application[]

  @@index([status, isVisible], name: "idx_position_status_visibility")
  @@index([locationId], name: "idx_position_location")
  @@index([salaryMin, salaryMax], name: "idx_position_salary_range")
}

model Location {
  id        Int        @id @default(autoincrement())
  address   String     @db.VarChar(255)
  city      String     @db.VarChar(100)
  state     String     @db.VarChar(100)
  country   String     @db.VarChar(100)
  postalCode String    @db.VarChar(20)
  candidates Candidate[]
  positions  Position[]
}

model InterviewFlow {
  id          Int            @id @default(autoincrement())
  description String         @db.VarChar(255)
  positions   Position[]
  steps       InterviewStep[]
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewFlow   InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewTypeId Int
  interviewType   InterviewType @relation(fields: [interviewTypeId], references: [id])
  name            String        @db.VarChar(100)
  orderIndex      Int
  interviews      Interview[]

  @@index([interviewFlowId, orderIndex], name: "idx_interview_step_flow_order")
}

model InterviewType {
  id          Int            @id @default(autoincrement())
  name        String         @db.VarChar(100)
  description String         @db.VarChar(255)
  steps       InterviewStep[]
}

model Application {
  id              Int               @id @default(autoincrement())
  positionId      Int
  position        Position          @relation(fields: [positionId], references: [id])
  candidateId     Int
  candidate       Candidate         @relation(fields: [candidateId], references: [id])
  applicationDate DateTime
  status          ApplicationStatus
  notes           String?           @db.Text
  interviews      Interview[]

  @@index([status], name: "idx_application_status")
  @@index([candidateId], name: "idx_application_candidate")
}

model Interview {
  id              Int           @id @default(autoincrement())
  applicationId   Int
  application     Application   @relation(fields: [applicationId], references: [id])
  interviewStepId Int
  interviewStep   InterviewStep @relation(fields: [interviewStepId], references: [id])
  employeeId      Int
  employee        Employee      @relation(fields: [employeeId], references: [id])
  interviewDate   DateTime
  result          String?       @db.VarChar(100)
  score           Int?
  notes           String?       @db.Text

  @@index([interviewDate], name: "idx_interview_date")
}

enum PositionStatus {
  OPEN
  CLOSED
  ON_HOLD
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  INTERVIEW_SCHEDULED
  OFFER_EXTENDED
  HIRED
  REJECTED
}