// schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PositionStatus {
  OPEN
  CLOSED
  PENDING
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  applications      Application[]     // Relation to applications submitted by candidates
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Company {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  employees   Employee[]
  positions   Position[]
}

model Employee {
  id          Int        @id @default(autoincrement())
  companyId   Int
  name        String     @db.VarChar(100)
  email       String     @unique @db.VarChar(255)
  role        String     @db.VarChar(50)
  isActive    Boolean    @default(true)
  isDeleted   Boolean    @default(false)  // Soft delete flag
  interviews  Interview[]
  company     Company    @relation(fields: [companyId], references: [id])
}

model Position {
  id                  Int               @id @default(autoincrement())
  companyId           Int
  interviewFlowId     Int?
  title               String            @db.VarChar(100)
  description         String            @db.Text
  status              PositionStatus
  isVisible           Boolean           @default(true)
  location            String            @db.VarChar(100)
  salaryMin           Decimal           @db.Numeric(10, 2)
  salaryMax           Decimal           @db.Numeric(10, 2)
  employmentType      EmploymentType
  currency            String            @default("USD") @db.VarChar(3)
  isDeleted           Boolean           @default(false)  // Soft delete flag
  applications        Application[]
  interviewFlow       InterviewFlow?    @relation(fields: [interviewFlowId], references: [id])
  company             Company           @relation(fields: [companyId], references: [id])
  positionDetails     PositionDetails?  // 1-to-1 normalized details
}

model PositionDetails {
  id                  Int               @id @default(autoincrement())
  positionId          Int               @unique
  jobDescription      String            @db.Text
  requirements        String            @db.Text
  responsibilities    String            @db.Text
  benefits            String            @db.Text
  companyDescription  String            @db.Text
  position            Position          @relation(fields: [positionId], references: [id])
}

model InterviewFlow {
  id              Int               @id @default(autoincrement())
  description     String            @db.Text
  interviewSteps  InterviewStep[]
}

model InterviewStep {
  id              Int               @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String            @db.VarChar(100)
  orderIndex      Int
  interviewType   InterviewType     @relation(fields: [interviewTypeId], references: [id])
  interviewFlow   InterviewFlow     @relation(fields: [interviewFlowId], references: [id])
  interviews      Interview[]
}

model InterviewType {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(50)
  description     String            @db.Text
  interviewSteps  InterviewStep[]
}

model Application {
  id              Int               @id @default(autoincrement())
  positionId      Int
  candidateId     Int
  applicationDate DateTime
  status          String            @default("submitted") @db.VarChar(50)
  notes           String?           @db.Text
  interviews      Interview[]
  candidate       Candidate         @relation(fields: [candidateId], references: [id])
  position        Position          @relation(fields: [positionId], references: [id])
}

model Interview {
  id              Int               @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate   DateTime
  result          String            @db.VarChar(50)
  score           Int
  notes           String?           @db.Text
  feedback        String?           @db.Text
  application     Application       @relation(fields: [applicationId], references: [id])
  interviewStep   InterviewStep     @relation(fields: [interviewStepId], references: [id])
  employee        Employee          @relation(fields: [employeeId], references: [id])
}
