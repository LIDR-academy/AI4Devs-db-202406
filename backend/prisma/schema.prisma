// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  employees Employee[]
  positions Position[]
}

model Employee {
  id         Int      @id @default(autoincrement())
  companyId  Int
  name       String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  roleId     Int
  isActive   Boolean  @default(true)
  company    Company  @relation(fields: [companyId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
  interviews Interview[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)
  employees Employee[]
}

model Position {
  id                 Int             @id @default(autoincrement())
  companyId          Int
  interviewFlowId    Int
  title              String          @db.VarChar(255)
  description        String?         @db.Text
  status             String?         @db.VarChar(50)
  isVisible          Boolean         @default(true)
  locationId         Int
  jobDescription     String?         @db.Text
  requirements       String?         @db.Text
  responsibilities   String?         @db.Text
  salaryMin          Float?
  salaryMax          Float?
  employmentTypeId   Int
  benefits           String?         @db.Text
  companyDescription String?         @db.Text
  applicationDeadline DateTime?
  contactInfo        String?         @db.VarChar(255)
  company            Company         @relation(fields: [companyId], references: [id])
  interviewFlow      InterviewFlow   @relation(fields: [interviewFlowId], references: [id])
  location           Location        @relation(fields: [locationId], references: [id])
  employmentType     EmploymentType  @relation(fields: [employmentTypeId], references: [id])
  applications       Application[]
}

model Location {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  positions Position[]
}

model EmploymentType {
  id        Int        @id @default(autoincrement())
  type      String     @db.VarChar(50)
  positions Position[]
}

model InterviewFlow {
  id            Int             @id @default(autoincrement())
  description   String?         @db.Text
  positions     Position[]
  interviewSteps InterviewStep[]
}

model InterviewStep {
  id              Int            @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String         @db.VarChar(255)
  orderIndex      Int
  interviewFlow   InterviewFlow  @relation(fields: [interviewFlowId], references: [id])
  interviewType   InterviewType  @relation(fields: [interviewTypeId], references: [id])
  interviews      Interview[]
}

model InterviewType {
  id              Int             @id @default(autoincrement())
  name            String          @db.VarChar(255)
  description     String?         @db.Text
  interviewSteps  InterviewStep[]
}

model Candidate {
  id              Int              @id @default(autoincrement())
  firstName       String           @db.VarChar(100)
  lastName        String           @db.VarChar(100)
  email           String           @unique @db.VarChar(255)
  phone           String?          @db.VarChar(15)
  educations      Education[]
  workExperiences WorkExperience[]
  resumes         Resume[]
  addresses       Address[]
  applications    Application[]
}

model Address {
  id          Int       @id @default(autoincrement())
  candidateId Int
  address     String    @db.VarChar(255)
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Application {
  id              Int         @id @default(autoincrement())
  positionId      Int
  candidateId     Int
  applicationDate DateTime
  status          String?     @db.VarChar(50)
  notes           String?     @db.Text
  position        Position    @relation(fields: [positionId], references: [id])
  candidate       Candidate   @relation(fields: [candidateId], references: [id])
  interviews      Interview[]
}

model Interview {
  id              Int            @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate   DateTime
  result          String?        @db.VarChar(50)
  score           Int?
  notes           String?        @db.Text
  application     Application    @relation(fields: [applicationId], references: [id])
  interviewStep   InterviewStep  @relation(fields: [interviewStepId], references: [id])
  employee        Employee       @relation(fields: [employeeId], references: [id])
}