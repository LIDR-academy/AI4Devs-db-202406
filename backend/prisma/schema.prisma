// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  description String? @db.Text
  employees Employee[]
  positions Position[]

  @@index([name])
}

model Employee {
  id        Int      @id @default(autoincrement())
  companyId Int
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  role      String   @db.VarChar(255)
  isActive  Boolean
  company   Company  @relation(fields: [companyId], references: [id])
  interviews Interview[]

  @@index([companyId])
  @@index([email])
}

model Position {
  id                  Int              @id @default(autoincrement())
  companyId           Int
  interviewFlowId     Int
  title               String           @db.VarChar(255)
  description         String?          @db.Text
  status              String           @db.VarChar(255)
  isVisible           Boolean
  location            String           @db.VarChar(255)
  jobDescription      String?          @db.Text
  requirements        String?          @db.Text
  responsibilities    String?          @db.Text
  salaryMin           Float?
  salaryMax           Float?
  employmentType      String           @db.VarChar(255)
  benefits            String?          @db.Text
  applicationDeadline DateTime?
  contactInfo         String           @db.VarChar(255)
  company             Company          @relation(fields: [companyId], references: [id])
  interviewFlow       InterviewFlow    @relation(fields: [interviewFlowId], references: [id])
  applications        Application[]

  @@index([companyId])
  @@index([interviewFlowId])
  @@index([title])
  @@index([salaryMin])
  @@index([salaryMax])
}

model InterviewFlow {
  id             Int              @id @default(autoincrement())
  description    String           @db.VarChar(255)
  interviewSteps InterviewStep[]
  positions      Position[]
}

model InterviewStep {
  id              Int             @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String          @db.VarChar(255)
  orderIndex      Int
  interviewFlow   InterviewFlow   @relation(fields: [interviewFlowId], references: [id])
  interviewType   InterviewType   @relation(fields: [interviewTypeId], references: [id])
  interviews      Interview[]

  @@index([interviewFlowId])
  @@index([interviewTypeId])
}

model InterviewType {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(255)
  description String?          @db.Text
  interviewSteps InterviewStep[]
}

model Candidate {
  id          Int              @id @default(autoincrement())
  firstName   String           @db.VarChar(100)
  lastName    String           @db.VarChar(100)
  email       String           @unique @db.VarChar(255)
  phone       String?          @db.VarChar(15)
  address     String?          @db.VarChar(100)
  applications Application[]
  educations  Education[]
  workExperiences WorkExperience[]
  resumes     Resume[]

  @@index([email])
}

model Application {
  id              Int              @id @default(autoincrement())
  positionId      Int
  candidateId     Int
  applicationDate DateTime
  status          String           @db.VarChar(255)
  notes           String?          @db.Text
  position        Position         @relation(fields: [positionId], references: [id])
  candidate       Candidate        @relation(fields: [candidateId], references: [id])
  interviews      Interview[]

  @@index([positionId])
  @@index([candidateId])
}

model Interview {
  id              Int              @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate   DateTime
  result          String?          @db.VarChar(255)
  score           Int?
  notes           String?          @db.Text
  application     Application      @relation(fields: [applicationId], references: [id])
  interviewStep   InterviewStep    @relation(fields: [interviewStepId], references: [id])
  employee        Employee         @relation(fields: [employeeId], references: [id])

  @@index([applicationId])
  @@index([interviewStepId])
  @@index([employeeId])
}

model Education {
  id          Int      @id @default(autoincrement())
  candidateId Int
  degree      String   @db.VarChar(255)
  institution String   @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime?
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}

model WorkExperience {
  id          Int      @id @default(autoincrement())
  candidateId Int
  company     String   @db.VarChar(255)
  position    String   @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime?
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}

model Resume {
  id          Int      @id @default(autoincrement())
  candidateId Int
  filePath    String   @db.VarChar(255)
  fileType    String   @db.VarChar(50)
  uploadDate  DateTime
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}