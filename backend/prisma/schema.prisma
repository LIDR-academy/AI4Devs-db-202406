generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(255)

  employees  Employee[]
  positions  Position[]

  @@index([name]) // Índice para búsqueda de empresas por nombre
}

model Employee {
  id        Int     @id @default(autoincrement())
  companyId Int
  name      String  @db.VarChar(100)
  email     String  @unique @db.VarChar(100) // Índice único para emails
  role      String  @db.VarChar(50)
  isActive  Boolean

  interviews  Interview[]

  company Company @relation(fields: [companyId], references: [id])

  @@index([companyId]) // Índice para búsquedas por empresa
}

model Position {
  id              Int     @id @default(autoincrement())
  companyId       Int
  interviewFlowId Int
  title           String  @db.VarChar(100)
  description     String  @db.Text
  status          String  @db.VarChar(50)
  isVisible       Boolean
  location        String  @db.VarChar(100)
  jobDescription  String  @db.Text
  requirements    String  @db.Text
  responsibilities String @db.Text
  salaryMin       Decimal @db.Numeric(10, 2)
  salaryMax       Decimal @db.Numeric(10, 2)
  employmentType  String  @db.VarChar(50)
  benefits        String  @db.Text
  companyDescription String @db.Text
  applicationDeadline DateTime
  contactInfo     String  @db.VarChar(100)

  applications    Application[]
  interviewFlow   InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  company         Company @relation(fields: [companyId], references: [id])

  @@index([companyId, status]) // Índice para búsquedas por empresa y estado
  @@index([isVisible]) // Índice para búsquedas por visibilidad
  @@index([applicationDeadline]) // Índice para búsquedas por fechas de aplicación
}

model InterviewFlow {
  id          Int     @id @default(autoincrement())
  description String  @db.VarChar(255)

  interviewSteps InterviewStep[]
}

model InterviewStep {
  id             Int     @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name           String  @db.VarChar(100)
  orderIndex     Int

  interviewFlow InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewType InterviewType @relation(fields: [interviewTypeId], references: [id])
  interviews    Interview[]

  @@index([interviewFlowId]) // Índice para búsquedas por flujo de entrevistas
}

model InterviewType {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String  @db.Text

  interviewSteps InterviewStep[]
}

model Candidate {
  id        Int     @id @default(autoincrement())
  firstName String  @db.VarChar(100)
  lastName  String  @db.VarChar(100)
  email     String  @unique @db.VarChar(255) // Índice único para emails
  phone     String? @db.VarChar(15)
  address   String? @db.VarChar(100)

  applications Application[]

  @@index([lastName]) // Índice para búsquedas por apellido
}

model Application {
  id          Int     @id @default(autoincrement())
  positionId  Int
  candidateId Int
  applicationDate DateTime
  status      String  @db.VarChar(50)
  notes       String  @db.Text

  position   Position @relation(fields: [positionId], references: [id])
  candidate  Candidate @relation(fields: [candidateId], references: [id])
  interviews Interview[]

  @@index([positionId]) // Índice para búsquedas por posición
  @@index([candidateId]) // Índice para búsquedas por candidato
  @@index([applicationDate]) // Índice para búsquedas por fecha de aplicación
}

model Interview {
  id              Int     @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate   DateTime
  result          String?  @db.VarChar(50)
  score           Int?
  notes           String   @db.Text

  application   Application @relation(fields: [applicationId], references: [id])
  interviewStep InterviewStep @relation(fields: [interviewStepId], references: [id])
  employee      Employee @relation(fields: [employeeId], references: [id])

  @@index([applicationId]) // Índice para búsquedas por aplicación
  @@index([interviewStepId]) // Índice para búsquedas por paso de entrevista
  @@index([employeeId]) // Índice para búsquedas por empleado
}
